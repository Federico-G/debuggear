// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

function bnf_join_id(a, b) {
    if (!a.identifiers) {
        if (!b.identifiers) {
            return [];
        } else {
            return b.identifiers;
        }
    } else if (!b.identifiers) {
        return a.identifiers;
    }
    return a.identifiers.concat(b.identifiers.filter(function(item) {
        return a.identifiers.indexOf(item) < 0;
    }))
}

var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "MAIN", "symbols": ["dgIN"], "postprocess": id},
    {"name": "MAIN", "symbols": ["dgOUT"], "postprocess": id},
    {"name": "MAIN", "symbols": ["dgOP"], "postprocess": id},
    {"name": "MAIN", "symbols": ["dgWHILE"], "postprocess": id},
    {"name": "MAIN", "symbols": ["dgDOWHILE"], "postprocess": id},
    {"name": "MAIN", "symbols": ["dgFOR"], "postprocess": id},
    {"name": "MAIN", "symbols": ["dgIF"], "postprocess": id},
    {"name": "MAIN", "symbols": ["dgFUNCTION"], "postprocess": id},
    {"name": "dgIN", "symbols": ["declaratorNoOpt"], "postprocess": d => ({type:'IN', identifiers: d[0].identifiers})},
    {"name": "dgIN", "symbols": ["declaratorTypeIdentifier"], "postprocess": d => {d[0].type = 'IN'; return d[0]}},
    {"name": "declaratorNoOpt", "symbols": ["identifier"], "postprocess": d => ({identifiers: [d[0]]})},
    {"name": "declaratorNoOpt", "symbols": ["declaratorNoOpt", {"literal":"["}, "_", "conditionalExpression", "_", {"literal":"]"}], "postprocess": d => ({identifiers: d[0].identifiers})},
    {"name": "dgOUT", "symbols": ["dgOUT", "_", {"literal":","}, "_", "validOUT"], "postprocess": d => ({type:'OUT', identifiers: bnf_join_id(d[0], d[4])})},
    {"name": "dgOUT", "symbols": ["validOUT"], "postprocess": d => ({type:'OUT', identifiers: d[0].identifiers})},
    {"name": "validOUT", "symbols": ["constant"], "postprocess": d => ({identifiers: []})},
    {"name": "validOUT", "symbols": ["stringLiteral"], "postprocess": d => ({identifiers: []})},
    {"name": "validOUT", "symbols": ["identifier"], "postprocess": d => ({identifiers: [d[0]]})},
    {"name": "dgOP", "symbols": ["statements"], "postprocess": d => ({type:'OP', statements: d[0]})},
    {"name": "dgOP", "symbols": ["retStatement"], "postprocess": d => ({type:'OP', statements: d[0]})},
    {"name": "dgOP", "symbols": ["statements", "_", "retStatement"], "postprocess": d => ({type:'OP', statements: d[0].concat([d[2]])})},
    {"name": "dgWHILE", "symbols": ["expression"], "postprocess": d => ({type:'WHILE', identifiers: d[0].identifiers})},
    {"name": "dgDOWHILE", "symbols": ["expression"], "postprocess": d => ({type:'DOWHILE', identifiers: d[0].identifiers})},
    {"name": "dgFOR", "symbols": ["expression", "_", {"literal":";"}, "_", "expression", "_", {"literal":";"}, "_", "expression"], "postprocess": d => ({type:'FOR', identifiers: bnf_join_id({identifiers: bnf_join_id(d[0], d[4])}, d[8])})},
    {"name": "dgFOR", "symbols": ["expression", "_", {"literal":";"}, "_", "expression", "_", {"literal":";"}], "postprocess": d => ({type:'FOR', identifiers: bnf_join_id(d[0], d[4])})},
    {"name": "dgFOR", "symbols": ["expression", "_", {"literal":";"}, "_", {"literal":";"}, "_", "expression"], "postprocess": d => ({type:'FOR', identifiers: bnf_join_id(d[0], d[6])})},
    {"name": "dgFOR", "symbols": [{"literal":";"}, "_", "expression", "_", {"literal":";"}, "_", "expression"], "postprocess": d => ({type:'FOR', identifiers: bnf_join_id(d[2], d[6])})},
    {"name": "dgFOR", "symbols": [{"literal":";"}, "_", {"literal":";"}, "_", "expression"], "postprocess": d => ({type:'FOR', identifiers: d[4].identifiers})},
    {"name": "dgFOR", "symbols": [{"literal":";"}, "_", "expression", "_", {"literal":";"}], "postprocess": d => ({type:'FOR', identifiers: d[2].identifiers})},
    {"name": "dgFOR", "symbols": ["expression", "_", {"literal":";"}, "_", {"literal":";"}], "postprocess": d => ({type:'FOR', identifiers: d[0].identifiers})},
    {"name": "dgFOR", "symbols": [{"literal":";"}, "_", {"literal":";"}], "postprocess": d => ({type:'FOR'})},
    {"name": "dgIF", "symbols": ["expression"], "postprocess": d => ({type:'IF', identifiers: d[0].identifiers})},
    {"name": "dgFUNCTION", "symbols": ["typeSpecifier", "_", "identifier", "_", {"literal":"("}, "_", "declaratorTypeIdentifierList", "_", {"literal":")"}], "postprocess": d => ({type:'FUNCTION', returnType: d[0], functionName: d[2], parameters: d[6].parameters})},
    {"name": "dgFUNCTION", "symbols": ["typeSpecifier", "_", "identifier", "_", {"literal":"("}, "_", {"literal":")"}], "postprocess": d => ({type:'FUNCTION', returnType: d[0], functionName: d[2], parameters: []})},
    {"name": "declaratorTypeIdentifierList", "symbols": ["declaratorTypeIdentifier"], "postprocess": d => d[0]},
    {"name": "declaratorTypeIdentifierList", "symbols": ["declaratorTypeIdentifierList", "_", {"literal":","}, "_", "declaratorTypeIdentifier"], "postprocess": d => ({parameters: d[4].parameters.concat(d[0].parameters) })},
    {"name": "declaratorTypeIdentifier", "symbols": ["declarationTypeSpecifier", "_", "identifier"], "postprocess": d => ({parameters: [{dataType: d[0], identifier: d[2]}] })},
    {"name": "retStatement$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "retStatement", "symbols": ["retStatement$string$1", "_", {"literal":";"}], "postprocess": d => ({type: "return" })},
    {"name": "retStatement$string$2", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "retStatement", "symbols": ["retStatement$string$2", "_", "expression", "_", {"literal":";"}], "postprocess": d => ({type: "return", identifiers: d[2].identifiers })},
    {"name": "statements", "symbols": ["statement"], "postprocess": d => [d[0]]},
    {"name": "statements", "symbols": ["statements", "_", "statement"], "postprocess": d => d[0].concat([d[2]])},
    {"name": "statement", "symbols": ["expressionStatement"], "postprocess": d => d[0]},
    {"name": "statement", "symbols": ["declaration"], "postprocess": d => d[0]},
    {"name": "expressionStatement", "symbols": ["expression", "_", {"literal":";"}], "postprocess": d => d[0]},
    {"name": "expressionStatement", "symbols": [{"literal":";"}], "postprocess": d => null},
    {"name": "declaration", "symbols": ["declarationTypeSpecifier", "_", "initDeclarators", "_", {"literal":";"}], "postprocess": d => ({type: "declaration", declarationType: d[0], declarators: d[2].declarators})},
    {"name": "initDeclarators", "symbols": ["initDeclarator"], "postprocess": d => d[0]},
    {"name": "initDeclarators", "symbols": ["initDeclarators", "_", {"literal":","}, "_", "initDeclarator"], "postprocess": d => ({declarators: d[4].declarators.concat(d[0].declarators)})},
    {"name": "initDeclarator", "symbols": ["declarator"], "postprocess": d => d[0]},
    {"name": "initDeclarator", "symbols": ["declarator", "_", {"literal":"="}, "_", "assignmentExpression"], "postprocess": d => {var x = {declarators: [{value: ""}]}; x.declarators[0].value = d[0].declarators[0].value; x.declarators[0].identifiers = bnf_join_id(d[0].declarators[0], d[4]); return x}},
    {"name": "declarator", "symbols": ["identifier"], "postprocess": d => ({declarators: [{value: d[0]}]})},
    {"name": "declarator", "symbols": ["declarator", {"literal":"["}, "_", "conditionalExpression", "_", {"literal":"]"}], "postprocess": d => { d[0].declarators[0].identifiers = d[3].identifiers; return d[0] }},
    {"name": "declarator", "symbols": ["declarator", {"literal":"["}, "_", {"literal":"]"}], "postprocess": d => d[0]},
    {"name": "typeSpecifier$string$1", "symbols": [{"literal":"v"}, {"literal":"o"}, {"literal":"i"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "typeSpecifier", "symbols": ["typeSpecifier$string$1"], "postprocess": d => d[0]},
    {"name": "typeSpecifier", "symbols": ["declarationTypeSpecifier"], "postprocess": d => d[0]},
    {"name": "declarationTypeSpecifier$string$1", "symbols": [{"literal":"c"}, {"literal":"h"}, {"literal":"a"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "declarationTypeSpecifier", "symbols": ["declarationTypeSpecifier$string$1"], "postprocess": d => d[0]},
    {"name": "declarationTypeSpecifier$string$2", "symbols": [{"literal":"s"}, {"literal":"h"}, {"literal":"o"}, {"literal":"r"}, {"literal":"t"}, {"literal":" "}, {"literal":"i"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "declarationTypeSpecifier", "symbols": ["declarationTypeSpecifier$string$2"], "postprocess": d => d[0]},
    {"name": "declarationTypeSpecifier$string$3", "symbols": [{"literal":"i"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "declarationTypeSpecifier", "symbols": ["declarationTypeSpecifier$string$3"], "postprocess": d => d[0]},
    {"name": "declarationTypeSpecifier$string$4", "symbols": [{"literal":"l"}, {"literal":"o"}, {"literal":"n"}, {"literal":"g"}, {"literal":" "}, {"literal":"i"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "declarationTypeSpecifier", "symbols": ["declarationTypeSpecifier$string$4"], "postprocess": d => d[0]},
    {"name": "declarationTypeSpecifier$string$5", "symbols": [{"literal":"f"}, {"literal":"l"}, {"literal":"o"}, {"literal":"a"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "declarationTypeSpecifier", "symbols": ["declarationTypeSpecifier$string$5"], "postprocess": d => d[0]},
    {"name": "declarationTypeSpecifier$string$6", "symbols": [{"literal":"d"}, {"literal":"o"}, {"literal":"u"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "declarationTypeSpecifier", "symbols": ["declarationTypeSpecifier$string$6"], "postprocess": d => d[0]},
    {"name": "expression", "symbols": ["assignmentExpression"], "postprocess": d => ({type: "expression", identifiers: d[0].identifiers })},
    {"name": "expression", "symbols": ["expression", "_", {"literal":","}, "_", "assignmentExpression"], "postprocess": d => ({type: "expression", identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "assignmentExpression", "symbols": ["conditionalExpression"], "postprocess": d => d[0]},
    {"name": "assignmentExpression", "symbols": ["unaryExpression", "_", "assignmentOperator", "_", "assignmentExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "conditionalExpression", "symbols": ["logicalOrExpression"], "postprocess": d => d[0]},
    {"name": "conditionalExpression", "symbols": ["logicalOrExpression", "_", {"literal":"?"}, "_", "expression", "_", {"literal":":"}, "_", "conditionalExpression"], "postprocess": d => ({identifiers: bnf_join_id({identifiers: bnf_join_id(d[0], d[4])}, d[8]) })},
    {"name": "logicalOrExpression", "symbols": ["logicalAndExpression"], "postprocess": d => d[0]},
    {"name": "logicalOrExpression$string$1", "symbols": [{"literal":"|"}, {"literal":"|"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "logicalOrExpression", "symbols": ["logicalOrExpression", "_", "logicalOrExpression$string$1", "_", "logicalAndExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "logicalAndExpression", "symbols": ["inclusiveOrExpression"], "postprocess": d => d[0]},
    {"name": "logicalAndExpression$string$1", "symbols": [{"literal":"&"}, {"literal":"&"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "logicalAndExpression", "symbols": ["logicalAndExpression", "_", "logicalAndExpression$string$1", "_", "inclusiveOrExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "inclusiveOrExpression", "symbols": ["exclusiveOrExpression"], "postprocess": d => d[0]},
    {"name": "inclusiveOrExpression", "symbols": ["inclusiveOrExpression", "_", {"literal":"|"}, "_", "exclusiveOrExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "exclusiveOrExpression", "symbols": ["andExpression"], "postprocess": d => d[0]},
    {"name": "exclusiveOrExpression", "symbols": ["exclusiveOrExpression", "_", {"literal":"^"}, "_", "andExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "andExpression", "symbols": ["equalityExpression"], "postprocess": d => d[0]},
    {"name": "andExpression", "symbols": ["andExpression", "_", {"literal":"&"}, "_", "equalityExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "equalityExpression", "symbols": ["relationalExpression"], "postprocess": d => d[0]},
    {"name": "equalityExpression$string$1", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "equalityExpression", "symbols": ["equalityExpression", "_", "equalityExpression$string$1", "_", "relationalExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "equalityExpression$string$2", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "equalityExpression", "symbols": ["equalityExpression", "_", "equalityExpression$string$2", "_", "relationalExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "relationalExpression", "symbols": ["shiftExpression"], "postprocess": d => d[0]},
    {"name": "relationalExpression", "symbols": ["relationalExpression", "_", {"literal":"<"}, "_", "shiftExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "relationalExpression", "symbols": ["relationalExpression", "_", {"literal":">"}, "_", "shiftExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "relationalExpression$string$1", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "relationalExpression", "symbols": ["relationalExpression", "_", "relationalExpression$string$1", "_", "shiftExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "relationalExpression$string$2", "symbols": [{"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "relationalExpression", "symbols": ["relationalExpression", "_", "relationalExpression$string$2", "_", "shiftExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "shiftExpression", "symbols": ["additiveExpression"], "postprocess": d => d[0]},
    {"name": "shiftExpression$string$1", "symbols": [{"literal":"<"}, {"literal":"<"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "shiftExpression", "symbols": ["shiftExpression", "_", "shiftExpression$string$1", "_", "additiveExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "shiftExpression$string$2", "symbols": [{"literal":">"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "shiftExpression", "symbols": ["shiftExpression", "_", "shiftExpression$string$2", "_", "additiveExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "additiveExpression", "symbols": ["multiplicativeExpression"], "postprocess": d => d[0]},
    {"name": "additiveExpression", "symbols": ["additiveExpression", "_", {"literal":"+"}, "_", "multiplicativeExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "additiveExpression", "symbols": ["additiveExpression", "_", {"literal":"-"}, "_", "multiplicativeExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "multiplicativeExpression", "symbols": ["castExpression"], "postprocess": d => d[0]},
    {"name": "multiplicativeExpression", "symbols": ["multiplicativeExpression", "_", {"literal":"*"}, "_", "castExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "multiplicativeExpression", "symbols": ["multiplicativeExpression", "_", {"literal":"/"}, "_", "castExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "multiplicativeExpression", "symbols": ["multiplicativeExpression", "_", {"literal":"%"}, "_", "castExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "castExpression", "symbols": ["unaryExpression"], "postprocess": d => d[0]},
    {"name": "castExpression", "symbols": [{"literal":"("}, "_", "typeSpecifier", "_", {"literal":")"}, "_", "unaryExpression"], "postprocess": d => d[6]},
    {"name": "unaryExpression", "symbols": ["postfixExpression"], "postprocess": d => d[0]},
    {"name": "unaryExpression$string$1", "symbols": [{"literal":"+"}, {"literal":"+"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "unaryExpression", "symbols": ["unaryExpression$string$1", "_", "unaryExpression"], "postprocess": d => d[2]},
    {"name": "unaryExpression$string$2", "symbols": [{"literal":"-"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "unaryExpression", "symbols": ["unaryExpression$string$2", "_", "unaryExpression"], "postprocess": d => d[2]},
    {"name": "unaryExpression", "symbols": ["unaryOperator", "_", "castExpression"], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[2]) })},
    {"name": "unaryExpression$string$3", "symbols": [{"literal":"s"}, {"literal":"i"}, {"literal":"z"}, {"literal":"e"}, {"literal":"o"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "unaryExpression", "symbols": ["unaryExpression$string$3", "_", "unaryExpression"], "postprocess": d => d[2]},
    {"name": "unaryExpression$string$4", "symbols": [{"literal":"s"}, {"literal":"i"}, {"literal":"z"}, {"literal":"e"}, {"literal":"o"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "unaryExpression", "symbols": ["unaryExpression$string$4", "_", {"literal":"("}, "_", "declarationTypeSpecifier", "_", {"literal":")"}]},
    {"name": "postfixExpression", "symbols": ["primaryExpression"], "postprocess": d => d[0]},
    {"name": "postfixExpression", "symbols": ["postfixExpression", "_", {"literal":"["}, "_", "expression", "_", {"literal":"]"}], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "postfixExpression", "symbols": ["postfixExpression", "_", {"literal":"("}, "_", "expression", "_", {"literal":")"}], "postprocess": d => ({identifiers: bnf_join_id(d[0], d[4]) })},
    {"name": "postfixExpression", "symbols": ["postfixExpression", "_", {"literal":"("}, "_", {"literal":")"}], "postprocess": d => d[0]},
    {"name": "postfixExpression$string$1", "symbols": [{"literal":"+"}, {"literal":"+"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "postfixExpression", "symbols": ["identifier", "_", "postfixExpression$string$1"], "postprocess": d => d[0]},
    {"name": "postfixExpression$string$2", "symbols": [{"literal":"-"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "postfixExpression", "symbols": ["identifier", "_", "postfixExpression$string$2"], "postprocess": d => d[0]},
    {"name": "primaryExpression", "symbols": ["identifier"], "postprocess": d => ({identifiers: [d[0]]})},
    {"name": "primaryExpression", "symbols": ["constant"]},
    {"name": "primaryExpression", "symbols": ["stringLiteral"]},
    {"name": "primaryExpression", "symbols": [{"literal":"("}, "_", "expression", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "identifier", "symbols": ["identifier2"], "postprocess": d => d.flat(Infinity).join("")},
    {"name": "identifier2", "symbols": ["identifierNondigit"]},
    {"name": "identifier2", "symbols": ["identifier2", "identifierNondigit"]},
    {"name": "identifier2", "symbols": ["identifier2", "digit"]},
    {"name": "identifierNondigit", "symbols": ["nondigit"]},
    {"name": "constant", "symbols": ["constant2"], "postprocess": d => d.flat(Infinity).join("")},
    {"name": "constant2", "symbols": ["integerConstant"]},
    {"name": "constant2", "symbols": ["characterConstant"]},
    {"name": "constant2", "symbols": ["floatingConstant"]},
    {"name": "integerConstant$ebnf$1", "symbols": ["integerSuffix"], "postprocess": id},
    {"name": "integerConstant$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "integerConstant", "symbols": ["decimalConstant", "integerConstant$ebnf$1"]},
    {"name": "integerConstant$ebnf$2", "symbols": ["integerSuffix"], "postprocess": id},
    {"name": "integerConstant$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "integerConstant", "symbols": ["octalConstant", "integerConstant$ebnf$2"]},
    {"name": "integerConstant$ebnf$3", "symbols": ["integerSuffix"], "postprocess": id},
    {"name": "integerConstant$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "integerConstant", "symbols": ["hexadecimalConstant", "integerConstant$ebnf$3"]},
    {"name": "decimalConstant", "symbols": ["nonzeroDigit"]},
    {"name": "decimalConstant", "symbols": ["decimalConstant", "digit"]},
    {"name": "octalConstant", "symbols": [{"literal":"0"}]},
    {"name": "octalConstant", "symbols": ["octalConstant", "octalDigit"]},
    {"name": "hexadecimalConstant", "symbols": ["hexadecimalPrefix", "hexadecimalDigit"]},
    {"name": "hexadecimalConstant", "symbols": ["hexadecimalConstant", "hexadecimalDigit"]},
    {"name": "hexadecimalPrefix$string$1", "symbols": [{"literal":"0"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "hexadecimalPrefix", "symbols": ["hexadecimalPrefix$string$1"]},
    {"name": "hexadecimalPrefix$string$2", "symbols": [{"literal":"0"}, {"literal":"X"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "hexadecimalPrefix", "symbols": ["hexadecimalPrefix$string$2"]},
    {"name": "integerSuffix$ebnf$1", "symbols": ["longSuffix"], "postprocess": id},
    {"name": "integerSuffix$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "integerSuffix", "symbols": ["unsignedSuffix", "integerSuffix$ebnf$1"]},
    {"name": "integerSuffix", "symbols": ["unsignedSuffix", "longLongSuffix"]},
    {"name": "integerSuffix$ebnf$2", "symbols": ["unsignedSuffix"], "postprocess": id},
    {"name": "integerSuffix$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "integerSuffix", "symbols": ["longSuffix", "integerSuffix$ebnf$2"]},
    {"name": "integerSuffix$ebnf$3", "symbols": ["unsignedSuffix"], "postprocess": id},
    {"name": "integerSuffix$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "integerSuffix", "symbols": ["longLongSuffix", "integerSuffix$ebnf$3"]},
    {"name": "unsignedSuffix", "symbols": [{"literal":"u"}]},
    {"name": "unsignedSuffix", "symbols": [{"literal":"U"}]},
    {"name": "longSuffix", "symbols": [{"literal":"l"}]},
    {"name": "longSuffix", "symbols": [{"literal":"L"}]},
    {"name": "longLongSuffix$string$1", "symbols": [{"literal":"l"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "longLongSuffix", "symbols": ["longLongSuffix$string$1"]},
    {"name": "longLongSuffix$string$2", "symbols": [{"literal":"L"}, {"literal":"L"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "longLongSuffix", "symbols": ["longLongSuffix$string$2"]},
    {"name": "floatingConstant", "symbols": ["decimalFloatingConstant"]},
    {"name": "floatingConstant", "symbols": ["hexadecimalFloatingConstant"]},
    {"name": "decimalFloatingConstant$ebnf$1", "symbols": ["exponentPart"], "postprocess": id},
    {"name": "decimalFloatingConstant$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "decimalFloatingConstant$ebnf$2", "symbols": ["floatingSuffix"], "postprocess": id},
    {"name": "decimalFloatingConstant$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "decimalFloatingConstant", "symbols": ["fractionalConstant", "decimalFloatingConstant$ebnf$1", "decimalFloatingConstant$ebnf$2"]},
    {"name": "decimalFloatingConstant$ebnf$3", "symbols": ["floatingSuffix"], "postprocess": id},
    {"name": "decimalFloatingConstant$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "decimalFloatingConstant", "symbols": ["digitSequence", "exponentPart", "decimalFloatingConstant$ebnf$3"]},
    {"name": "hexadecimalFloatingConstant$ebnf$1", "symbols": ["floatingSuffix"], "postprocess": id},
    {"name": "hexadecimalFloatingConstant$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "hexadecimalFloatingConstant", "symbols": ["hexadecimalPrefix", "hexadecimalFractionalConstant", "binaryExponentPart", "hexadecimalFloatingConstant$ebnf$1"]},
    {"name": "hexadecimalFloatingConstant$ebnf$2", "symbols": ["floatingSuffix"], "postprocess": id},
    {"name": "hexadecimalFloatingConstant$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "hexadecimalFloatingConstant", "symbols": ["hexadecimalPrefix", "hexadecimalDigitSequence", "binaryExponentPart", "hexadecimalFloatingConstant$ebnf$2"]},
    {"name": "fractionalConstant$ebnf$1", "symbols": ["digitSequence"], "postprocess": id},
    {"name": "fractionalConstant$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "fractionalConstant", "symbols": ["fractionalConstant$ebnf$1", {"literal":"."}, "digitSequence"]},
    {"name": "fractionalConstant", "symbols": ["digitSequence", {"literal":"."}]},
    {"name": "exponentPart$ebnf$1", "symbols": ["sign"], "postprocess": id},
    {"name": "exponentPart$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "exponentPart", "symbols": [{"literal":"e"}, "exponentPart$ebnf$1", "digitSequence"]},
    {"name": "exponentPart$ebnf$2", "symbols": ["sign"], "postprocess": id},
    {"name": "exponentPart$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "exponentPart", "symbols": [{"literal":"E"}, "exponentPart$ebnf$2", "digitSequence"]},
    {"name": "sign", "symbols": [{"literal":"+"}]},
    {"name": "sign", "symbols": [{"literal":"-"}]},
    {"name": "digitSequence", "symbols": ["digit"]},
    {"name": "digitSequence", "symbols": ["digitSequence", "digit"]},
    {"name": "hexadecimalFractionalConstant$ebnf$1", "symbols": ["hexadecimalDigitSequence"], "postprocess": id},
    {"name": "hexadecimalFractionalConstant$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "hexadecimalFractionalConstant", "symbols": ["hexadecimalFractionalConstant$ebnf$1", {"literal":"."}, "hexadecimalDigitSequence"]},
    {"name": "hexadecimalFractionalConstant", "symbols": ["hexadecimalDigitSequence", {"literal":"."}]},
    {"name": "binaryExponentPart$ebnf$1", "symbols": ["sign"], "postprocess": id},
    {"name": "binaryExponentPart$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "binaryExponentPart", "symbols": [{"literal":"p"}, "binaryExponentPart$ebnf$1", "digitSequence"]},
    {"name": "binaryExponentPart$ebnf$2", "symbols": ["sign"], "postprocess": id},
    {"name": "binaryExponentPart$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "binaryExponentPart", "symbols": [{"literal":"P"}, "binaryExponentPart$ebnf$2", "digitSequence"]},
    {"name": "hexadecimalDigitSequence", "symbols": ["hexadecimalDigit"]},
    {"name": "hexadecimalDigitSequence", "symbols": ["hexadecimalDigitSequence", "hexadecimalDigit"]},
    {"name": "floatingSuffix", "symbols": [{"literal":"f"}]},
    {"name": "floatingSuffix", "symbols": [{"literal":"l"}]},
    {"name": "floatingSuffix", "symbols": [{"literal":"F"}]},
    {"name": "floatingSuffix", "symbols": [{"literal":"L"}]},
    {"name": "characterConstant", "symbols": [{"literal":"'"}, "cChar", {"literal":"'"}]},
    {"name": "characterConstant$string$1", "symbols": [{"literal":"L"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "characterConstant", "symbols": ["characterConstant$string$1", "cChar", {"literal":"'"}]},
    {"name": "cChar", "symbols": [/[^'\\\n\r]/]},
    {"name": "cChar", "symbols": ["escapeSequence"]},
    {"name": "escapeSequence", "symbols": ["simpleEscapeSequence"]},
    {"name": "escapeSequence", "symbols": ["octalEscapeSequence"]},
    {"name": "escapeSequence", "symbols": ["hexadecimalEscapeSequence"]},
    {"name": "simpleEscapeSequence$string$1", "symbols": [{"literal":"\\"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$1"]},
    {"name": "simpleEscapeSequence$string$2", "symbols": [{"literal":"\\"}, {"literal":"\""}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$2"]},
    {"name": "simpleEscapeSequence$string$3", "symbols": [{"literal":"\\"}, {"literal":"?"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$3"]},
    {"name": "simpleEscapeSequence$string$4", "symbols": [{"literal":"\\"}, {"literal":"\\"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$4"]},
    {"name": "simpleEscapeSequence$string$5", "symbols": [{"literal":"\\"}, {"literal":"a"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$5"]},
    {"name": "simpleEscapeSequence$string$6", "symbols": [{"literal":"\\"}, {"literal":"b"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$6"]},
    {"name": "simpleEscapeSequence$string$7", "symbols": [{"literal":"\\"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$7"]},
    {"name": "simpleEscapeSequence$string$8", "symbols": [{"literal":"\\"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$8"]},
    {"name": "simpleEscapeSequence$string$9", "symbols": [{"literal":"\\"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$9"]},
    {"name": "simpleEscapeSequence$string$10", "symbols": [{"literal":"\\"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$10"]},
    {"name": "simpleEscapeSequence$string$11", "symbols": [{"literal":"\\"}, {"literal":"v"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "simpleEscapeSequence", "symbols": ["simpleEscapeSequence$string$11"]},
    {"name": "octalEscapeSequence", "symbols": [{"literal":"\\"}, "octalDigit"]},
    {"name": "octalEscapeSequence", "symbols": [{"literal":"\\"}, "octalDigit", "octalDigit"]},
    {"name": "octalEscapeSequence", "symbols": [{"literal":"\\"}, "octalDigit", "octalDigit", "octalDigit"]},
    {"name": "hexadecimalEscapeSequence$string$1", "symbols": [{"literal":"\\"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "hexadecimalEscapeSequence", "symbols": ["hexadecimalEscapeSequence$string$1", "hexadecimalDigit"]},
    {"name": "hexadecimalEscapeSequence", "symbols": ["hexadecimalEscapeSequence", "hexadecimalDigit"]},
    {"name": "stringLiteral", "symbols": ["stringLiteral2"], "postprocess": d => d.flat(Infinity).join("")},
    {"name": "stringLiteral2$ebnf$1", "symbols": ["sCharSequence"], "postprocess": id},
    {"name": "stringLiteral2$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "stringLiteral2", "symbols": [{"literal":"\""}, "stringLiteral2$ebnf$1", {"literal":"\""}]},
    {"name": "stringLiteral2$string$1", "symbols": [{"literal":"L"}, {"literal":"\""}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "stringLiteral2$ebnf$2", "symbols": ["sCharSequence"], "postprocess": id},
    {"name": "stringLiteral2$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "stringLiteral2", "symbols": ["stringLiteral2$string$1", "stringLiteral2$ebnf$2", {"literal":"\""}]},
    {"name": "sCharSequence", "symbols": ["cChar"]},
    {"name": "sCharSequence", "symbols": ["sCharSequence", "cChar"]},
    {"name": "assignmentOperator", "symbols": [{"literal":"="}]},
    {"name": "assignmentOperator$string$1", "symbols": [{"literal":"*"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$1"]},
    {"name": "assignmentOperator$string$2", "symbols": [{"literal":"/"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$2"]},
    {"name": "assignmentOperator$string$3", "symbols": [{"literal":"%"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$3"]},
    {"name": "assignmentOperator$string$4", "symbols": [{"literal":"+"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$4"]},
    {"name": "assignmentOperator$string$5", "symbols": [{"literal":"-"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$5"]},
    {"name": "assignmentOperator$string$6", "symbols": [{"literal":"<"}, {"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$6"]},
    {"name": "assignmentOperator$string$7", "symbols": [{"literal":">"}, {"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$7"]},
    {"name": "assignmentOperator$string$8", "symbols": [{"literal":"&"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$8"]},
    {"name": "assignmentOperator$string$9", "symbols": [{"literal":"^"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$9"]},
    {"name": "assignmentOperator$string$10", "symbols": [{"literal":"|"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assignmentOperator", "symbols": ["assignmentOperator$string$10"]},
    {"name": "unaryOperator", "symbols": [{"literal":"&"}]},
    {"name": "unaryOperator", "symbols": [{"literal":"*"}]},
    {"name": "unaryOperator", "symbols": [{"literal":"+"}]},
    {"name": "unaryOperator", "symbols": [{"literal":"-"}]},
    {"name": "unaryOperator", "symbols": [{"literal":"~"}]},
    {"name": "unaryOperator", "symbols": [{"literal":"!"}]},
    {"name": "nonzeroDigit", "symbols": [/[1-9]/]},
    {"name": "digit", "symbols": [/[0-9]/]},
    {"name": "hexadecimalDigit", "symbols": [/[0-9a-fA-F]/]},
    {"name": "octalDigit", "symbols": [/[0-7]/]},
    {"name": "nondigit", "symbols": [/[a-zA-Z_]/]},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", /[\n\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": d => null},
    {"name": "__$ebnf$1", "symbols": [/[\n\s]/]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", /[\n\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": d => null}
]
  , ParserStart: "MAIN"
}
dg.grammar = grammar;
})();
